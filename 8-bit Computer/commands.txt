0000 0XXX LDAV [M] - Load Value on register A
0000 1XXX LDBV [M] - Load Value on register B
0001 0XXX LDCV [M] - Load Value on register C
0001 1XXX LDMV [M] - Load Value on RAM in address register C

0010 0XXX LDAA [M] - Load value in Address on register A
0010 1XXX LDBA [M] - Load value in Address on register B
0011 0XXX LDCA [M] - Load value in Address on register C
0011 1XXX LDMA [M] - Load value in Address on RAM in address register C

0100 0XXX ADDV [M] - Add register A with Value, writes result on register B
0100 1XXX ADDM [M] - Add register A with value in address register C, writes result on register B
0101 0XXX SUBV [M] - Subtracts register A with Value, writes result on register B
0101 1XXX SUBM [M] - Subtracts register A with value in address register C, writes result on register B

0110 0000 INCA [0] - Increments register A
0110 1000 INCB [0] - Increments register B
0111 0000 INCC [0] - Increments register C
0111 1XXX JUMP [M] - Sets the Program Pointer to Address

1000 0000 DECA [0] - Decrements register A
1000 1000 DECB [0] - Decrements register B
1001 0000 DECC [0] - Decrements register C
1001 1NZC JMPA [1] - Sets the Program Pointer to Address if NZC in Aritmetic Flags is set

1010 0XXX OUTN [M] - Prints value on register A as a Number
1010 1XXX OUTC [M] - Prints value on register A as a Character
1011 0000 HALT [0] - Stops the computer
1011 1SUO JMPS [1] - Sets the Program Pointer to Address if SUO in Stack Flags is set

1100 0000 PSHA [0] - Pushes resgister A's value onto the stack
1100 1000 PSHB [0] - Pushes resgister B's value onto the stack
1101 0000 PSHC [0] - Pushes resgister C's value onto the stack
1101 1000 PUSH [0] - Pushes value in address register C onto the stack

1110 0000 POPA [0] - Pops value and writes result on register A
1110 1000 POPB [0] - Pops value and writes result on register B
1111 0000 POPC [0] - Pops value and writes result on register C
1111 1000 POPM [0] - Pops value and writes result on address register C

[Argument] Explanation:
[1] means that must have a 1 byte argument after the command.
[0] means that must not have a argument after the command.
[M] means that may have a 1 byte argument. If ends with 111 a argument is needed.
Else those 3 bits are the argument.

Obs: 
XXX means that a number from 000 to 110 will be the argument for
the operation. If XXX is 111, then next byte will be the argument.

NZC means the Aritmetic Flags: Negative, Zero, Carry.
Ex1: 1001 1001 0000 0000 -> Jumps to 0000 0000 if the Carry flag is set
Ex2: 1001 1011 0000 1100 -> Jumps to 0000 1100 if the Carry AND Zero flag are set

SUO means the Stack Flags: Set-to-zero, Underflow, Overflow.
Ex1: 1011 1001 0000 0000 -> Jumps to 0000 0000 if the Overflow flag is set
Ex2: 1011 1011 0000 1100 -> Jumps to 0000 1100 if the Overflow AND Underflow flag are set

Undefined Instructions:

0110 0001 - 0110 0111 (INCA)
0110 1001 - 0110 1111 (INCB)
0111 0001 - 0111 0111 (INCC)

1000 0001 - 1000 0111 (DECA)
1000 1001 - 1000 1111 (DECB)
1001 0001 - 1001 0111 (DECC)

1011 0001 - 1011 0111 (HALT)

1100 0001 - 1100 0111 (PSHA)
1100 1001 - 1100 1111 (PSHB)
1101 0001 - 1101 0111 (PSHC)
1101 1001 - 1101 1111 (PUSH)

1110 0001 - 1110 0111 (POPA)
1110 1001 - 1110 1111 (POPB)
1111 0001 - 1111 0111 (POPC)
1111 1001 - 1111 1111 (POPM)
